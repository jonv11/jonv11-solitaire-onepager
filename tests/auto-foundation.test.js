import { describe, test, expect } from '@jest/globals';  import { Engine, build } from './fixture-builder.js';  // 1. Waste top Ace should move to empty foundation test('auto_moves_ace_from_waste', async () => {   const st = build({ waste: ['H1'] });   const res = await Engine.runAutoToFixpoint();   expect(res.moves).toBe(1);   const hf = st.piles.foundations.find((f) => f.suit === 'H');   expect(hf.cards.length).toBe(1);   expect(hf.cards[0].rank).toBe(1); });  // 2. Tableau Ace moves and flips underlying card test('auto_moves_ace_from_tableau', async () => {   const st = build({ tableau: [['h5', 'S1']] });   const res = await Engine.runAutoToFixpoint();   expect(res.moves).toBe(1);   const sf = st.piles.foundations.find((f) => f.suit === 'S');   expect(sf.cards.length).toBe(1);   expect(st.piles.tableau[0].cards.length).toBe(1);   expect(st.piles.tableau[0].cards[0].faceUp).toBe(true); });  // 3. Multiple aces move in deterministic order (waste before tableau) test('auto_moves_multiple_aces', async () => {   const st = build({ waste: ['D1'], tableau: [['C1']] });   const res = await Engine.runAutoToFixpoint();   expect(res.moves).toBe(2);   expect(st.piles.foundations.find((f) => f.suit === 'D').cards.length).toBe(1);   expect(st.piles.foundations.find((f) => f.suit === 'C').cards.length).toBe(1);   expect(st.piles.waste.cards.length).toBe(0);   expect(st.piles.tableau[0].cards.length).toBe(0); });  // 4. Chain moves AGåÆ2GåÆ3 test('auto_chains_from_ace_to_three', async () => {   const st = build({ waste: ['H1'], tableau: [['H2'], ['H3']] });   const res = await Engine.runAutoToFixpoint();   expect(res.moves).toBe(3);   const hf = st.piles.foundations.find((f) => f.suit === 'H');   expect(hf.cards.length).toBe(3);   expect(hf.cards[2].rank).toBe(3); });  // 5. Wrong suit ace does not fill other foundations test('auto_no_false_ace_move', async () => {   const st = build({ waste: ['C1'] });   const res = await Engine.runAutoToFixpoint();   expect(res.moves).toBe(1);   expect(st.piles.foundations.find((f) => f.suit === 'C').cards.length).toBe(1);   expect(st.piles.foundations.find((f) => f.suit === 'H').cards.length).toBe(0); });  // 6. Second run performs no moves test('auto_is_idempotent_and_terminates', async () => {   const st = build({ waste: ['H1'] });   const r1 = await Engine.runAutoToFixpoint();   const r2 = await Engine.runAutoToFixpoint();   expect(r1.moves).toBe(1);   expect(r2.moves).toBe(0);   const hf = st.piles.foundations.find((f) => f.suit === 'H');   expect(hf.cards.length).toBe(1); });
