import { describe, test, expect } from '@jest/globals';  import fs from 'node:fs'; import vm from 'node:vm';  // Prepare a browser-like global context for Engine and Solver const context = { window: {}, console }; context.window = context; // window.window === window vm.createContext(context);  // Load required modules into the context for (const file of ['js/emitter.js', 'js/model.js', 'js/engine.js', 'js/solver.js']) {   const code = fs.readFileSync(new URL(`../${file}`, import.meta.url), 'utf8');   vm.runInContext(code, context, { filename: file }); }  const { Solver, Model } = context.window;  // ---------- Helpers to build game states for tests ---------- const TEST_SETTINGS = { drawCount: 1, redealPolicy: 'none', leftHandMode: false, animations: false, hints: true, autoComplete: false, sound: false };  function card(suit, rank, faceUp = true) {   return {     id: suit + rank,     rank,     suit,     color: Model.isRed(suit) ? 'red' : 'black',     faceUp   }; }  function stateSkeleton() {   return {     seed: 0,     piles: {     tableau: [],     foundations: [],     stock: { id: 'stock', kind: 'stock', cards: [] },     waste: { id: 'waste', kind: 'waste', cards: [] }     },     settings: TEST_SETTINGS,     score: { total: 0, moves: 0 },     redealsRemaining: 0,     history: [],     time: { startedAt: 0, elapsedMs: 0 }   }; }  function trivialWin() {   const st = stateSkeleton();   const suits = ['S', 'H', 'D', 'C'];   for (const s of suits) {     const cards = [];     for (let r = 1; r <= 12; r++) cards.push(card(s, r));     st.piles.foundations.push({ id: 'foundation-' + s, kind: 'foundation', suit: s, cards });   }   st.piles.tableau = suits.map((s, i) => ({ id: 'tab-' + (i + 1), kind: 'tableau', col: i + 1, cards: [card(s, 13)] }));   for (let i = 4; i < 7; i++) st.piles.tableau.push({ id: 'tab-' + (i + 1), kind: 'tableau', col: i + 1, cards: [] });   return st; }  function kingBlock() {   const st = stateSkeleton();   st.piles.tableau = [     { id: 'tab-1', kind: 'tableau', col: 1, cards: [card('S', 5, false), card('H', 13)] },     { id: 'tab-2', kind: 'tableau', col: 2, cards: [card('D', 2)] },     { id: 'tab-3', kind: 'tableau', col: 3, cards: [card('C', 4)] },     { id: 'tab-4', kind: 'tableau', col: 4, cards: [card('H', 6)] },     { id: 'tab-5', kind: 'tableau', col: 5, cards: [card('C', 8)] },     { id: 'tab-6', kind: 'tableau', col: 6, cards: [card('H', 10)] },     { id: 'tab-7', kind: 'tableau', col: 7, cards: [card('C', 12)] }   ];   st.piles.foundations = ['S', 'H', 'D', 'C'].map(s => ({ id: 'foundation-' + s, kind: 'foundation', suit: s, cards: [] }));   return st; }  // ---------- Tests ----------  test('Solver.isNoHope returns false for a trivially winnable state', () => {   expect(Solver.isNoHope(trivialWin())).toBe(false); });  test('Solver.isNoHope returns true for a blocked state with no moves', () => {   expect(Solver.isNoHope(kingBlock())).toBe(true); }); 
